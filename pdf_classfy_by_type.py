"""
根据利用meta_scan得到的结果，对pdf是否为文字版进行分类。
定义标准：
一、什么pdf会是文字pdf，只要满足以下任意一条
  1. 随机抽取N页，如果有任何一页文字数目大于100
  2. 只要存在一个页面，图片的数量为0
二、什么是扫描版pdf，只要满足以下任意一条
  1. ~~80%页面上的最大图大小一样并且面积超过页面面积0.6~~
  2. 大部分页面上文字的长度都是相等的。

"""
import click
import json
import sys
from loguru import logger
import numpy as np
from loguru import logger
from collections import OrderedDict, Counter

TEXT_LEN_THRESHOLD = 200
TEXT_LEN_SAMPLE_RATIO=0.1 # 抽取0.1的页面进行文字长度统计


def mymax(alist: list):
    if len(alist) == 0:
        return 0  # 空是0， 0*0也是0大小q
    else:
        return max(alist)


def classify_by_area(pdf_path, total_page: int, page_width, page_height, img_sz_list):
    """
    80%页面上的最大图大小一样并且面积超过页面面积0.6则返回False，否则返回True
    :param pdf_path:
    :param total_page:
    :param page_width:
    :param page_height:
    :param img_sz_list:
    :return:
    """
    # 只要有一页没有图片，那么就是文字pdf
    if any([len(img_sz) == 0 for img_sz in img_sz_list]):
        return True
    # 通过objid去掉重复出现10次以上的图片，这些图片是隐藏的透明图层，其特点是id都一样
    # 先对每个id出现的次数做个统计
    objid_cnt = Counter([objid for page_img_sz in img_sz_list for _, _, _, _, objid in page_img_sz])
    # 再去掉出现次数大于10的
    repeat_threshold = min(2, total_page)
    bad_image_objid = set([objid for objid, cnt in objid_cnt.items() if cnt >= repeat_threshold])
    # 检查一下这些bad_image里有没有与page大小差不多的，如果有，那么就是文字pdf
    fake_image_ids = [objid for objid in bad_image_objid if any([abs((x1 - x0) * (y1 - y0) / page_width * page_height) > 0.9 for images in img_sz_list for x0, y0, x1, y1, _ in images])]
    if len(fake_image_ids):
        return True
    
    img_sz_list = [[img_sz for img_sz in page_img_sz if img_sz[-1] not in bad_image_objid] for page_img_sz in img_sz_list] # 过滤掉重复出现的图片
    
    # 计算每个页面上最大的图的面积，然后计算这个面积占页面面积的比例
    max_image_area_per_page = [mymax([(x1 - x0) * (y1 - y0) for x0, y0, x1, y1, _ in page_img_sz]) for page_img_sz in img_sz_list]
    page_area = page_width * page_height
    max_image_area_per_page = [area / page_area for area in max_image_area_per_page]
    max_image_area_per_page = [area for area in max_image_area_per_page if area > 0.6]
    if len(max_image_area_per_page) >= 0.8 * total_page: # 这里条件成立的前提是把反复出现的图片去掉了。这些图片是隐藏的透明图层，其特点是id都一样
        return False
    else:
        return True


def classify_by_text_len(text_len_list: list, total_page: int):
    """
    随机抽取10%的页面，如果少于5个页面，那么就取全部页面。
    查看页面上的文字长度，如果有任何一个页面的文字长度大于TEXT_LEN_THRESHOLD，那么就是文字pdf
    :param total_page:
    :param text_len_list:
    :return:
    """
    select_page_cnt = int(total_page*TEXT_LEN_SAMPLE_RATIO)  # 选取10%的页面
    if select_page_cnt < 5:
        select_page_cnt = total_page

    page_num = np.random.choice(total_page, select_page_cnt, replace=False)
    text_len_lst = [text_len_list[i] for i in page_num]
    is_text_pdf = any([text_len > TEXT_LEN_THRESHOLD for text_len in text_len_lst])
    return is_text_pdf


def classify(pdf_path, total_page: int, page_width, page_height, img_sz_list: list, text_len_list: list):
    """
    这里的图片和页面长度单位是pts
    :param total_page:
    :param text_len_list:
    :param page_width:
    :param page_height:
    :param img_sz_list:
    :param pdf_path:
    :return:
    """
    is_text_pdf_1 = classify_by_area(pdf_path, total_page, page_width, page_height, img_sz_list)
    is_text_pdf_2 = classify_by_text_len(text_len_list, total_page)
    if all([is_text_pdf_1, is_text_pdf_2]):
        return True
    elif not any([is_text_pdf_1, is_text_pdf_2]):
        return False
    else:
        print(f"WARNING: {pdf_path} is not classified by area and text_len", file=sys.stderr) # 利用这种情况可以快速找出来哪些pdf比较特殊，针对性修正分类算法
        return False


@click.command()
@click.option("--json-file", type=str, help="pdf信息")
def main(json_file):
    if json_file is None:
        print("json_file is None", file=sys.stderr)
        exit(0)
    try:
        with open(json_file, "r") as f:
            for l in f:
                if l.strip() == "":
                    continue
                o = json.loads(l)
                total_page = o["total_page"]
                page_width = o["page_width_pts"]
                page_height = o["page_height_pts"]
                img_sz_list = o["image_info_per_page"]
                text_len_list = o['text_len_per_page']
                pdf_path = o['pdf_path']
                is_encrypted = o['is_encrypted']
                is_needs_password = o['is_needs_password']
                if is_encrypted or total_page == 0 or is_needs_password:  # 加密的，需要密码的，没有页面的，都不处理
                    continue
                tag = classify(pdf_path, total_page, page_width, page_height, img_sz_list, text_len_list)
                o['is_text_pdf'] = tag
                print(json.dumps(o, ensure_ascii=False))
    except Exception as e:
        print("ERROR: ", e, file=sys.stderr)
        


if __name__ == "__main__":
    main()
    # false = False
    # true = True
    # null = None
    # o = {"pdf_path":"s3://llm-private-dataset-snew/dianzishu_zhongwenzaixian/pdf-6w/61570767.pdf","is_needs_password":false,"is_encrypted":false,"total_page":343,"page_width_pts":499,"page_height_pts":697,"image_info_per_page":[[[0,0,498,696,2549]],[[0,0,498,681,3]],[[0,0,499,697,1304]],[[0,0,499,681,21]],[[0,0,498,697,1317]],[[0,0,499,697,1304]],[[0,0,498,697,1317],[338,558,397,584,29]],[[0,0,498,697,1317]],[[0,0,499,697,1304]],[[0,0,498,697,1317]],[[0,0,499,697,1304]],[[0,0,498,697,46]],[[0,0,499,697,49]],[[0,0,498,697,53]],[[0,0,499,697,56]],[[0,0,498,697,60]],[[0,0,499,697,63]],[[0,0,498,697,67]],[[0,0,499,697,70]],[[0,0,498,697,74]],[[0,0,499,697,77]],[[0,0,498,697,81]],[[0,0,499,697,84]],[[0,0,498,697,88]],[[0,0,499,697,91]],[[0,0,498,697,95]],[[0,0,499,697,98]],[[0,0,498,697,102]],[[0,0,499,697,105]],[[0,0,498,697,109]],[[0,0,499,697,112]],[[0,0,498,697,116]],[[0,0,499,697,119],[490,0,499,697,121]],[[0,0,498,697,127],[8,0,499,697,129],[8,0,498,697,131]],[[0,0,499,697,134]],[[0,0,498,697,138]],[[0,0,499,697,141]],[[0,0,498,697,145]],[[0,0,499,697,148]],[[0,0,498,697,152]],[[0,0,499,697,155]],[[0,0,498,697,159]],[[0,0,499,697,162]],[[0,0,498,697,166]],[[0,0,499,697,169]],[[0,0,498,697,173]],[[0,0,499,697,176]],[[0,0,498,697,180]],[[0,0,499,697,183]],[[0,0,498,697,187]],[[0,0,499,697,190]],[[0,0,498,697,194]],[[0,0,499,697,197],[491,0,499,696,199]],[[9,0,498,696,203]],[[0,0,499,697,206]],[[0,0,498,697,210]],[[0,0,499,697,213]],[[0,0,498,697,217]],[[0,0,499,697,220]],[[0,0,498,697,224]],[[0,0,499,697,227]],[[0,0,498,697,231]],[[0,0,499,697,234]],[[0,0,498,697,238]],[[0,0,499,697,241]],[[0,0,498,697,245]],[[0,0,499,697,248]],[[0,0,498,697,252]],[[0,0,499,697,255]],[[0,0,498,697,259],[302,194,404,292,260]],[[0,0,499,697,263]],[[0,0,498,697,267]],[[0,0,499,697,270],[490,0,499,697,272]],[[0,0,498,697,276],[8,0,498,697,278]],[[0,0,499,697,281]],[[0,0,498,697,285]],[[0,0,499,697,288]],[[0,0,498,697,292]],[[0,0,499,697,295]],[[0,0,498,697,299]],[[0,0,499,697,302]],[[0,0,498,697,306]],[[0,0,499,697,309]],[[0,0,498,697,313]],[[0,0,499,697,316]],[[0,0,498,697,320]],[[0,0,499,697,323]],[[0,0,498,697,327]],[[0,0,499,697,330]],[[0,0,498,697,334]],[[0,0,499,697,337],[490,0,499,696,339]],[[0,0,498,697,343],[8,0,498,696,345]],[[0,0,499,697,348]],[[0,0,498,697,352]],[[0,0,499,697,355]],[[0,0,498,697,359]],[[0,0,499,697,362]],[[0,0,498,697,366]],[[0,0,499,697,369]],[[0,0,498,697,373]],[[0,0,499,697,376]],[[0,0,498,697,380]],[[0,0,499,697,383]],[[0,0,498,697,387]],[[0,0,499,697,390]],[[0,0,498,697,394]],[[0,0,499,697,397]],[[0,0,498,697,401]],[[0,0,499,697,404]],[[0,0,498,697,408]],[[0,0,499,697,411]],[[0,0,498,697,415]],[[0,0,499,697,418]],[[0,0,498,697,422]],[[0,0,499,697,425],[491,0,499,697,427]],[[9,0,498,697,431]],[[0,0,499,697,434]],[[0,0,498,697,438]],[[0,0,499,697,441]],[[0,0,498,697,445]],[[0,0,499,697,448]],[[0,0,498,697,452]],[[0,0,499,697,455]],[[0,0,498,697,459]],[[0,0,499,697,462]],[[0,0,498,697,466]],[[0,0,499,697,469]],[[0,0,498,697,473]],[[0,0,499,697,476]],[[0,0,498,697,480]],[[0,0,499,697,483],[490,0,499,697,485]],[[0,0,498,697,489],[8,0,498,697,491]],[[0,0,499,697,494]],[[0,0,498,697,498]],[[0,0,499,697,501]],[[0,0,498,697,505]],[[0,0,499,697,508]],[[0,0,498,697,512]],[[0,0,499,697,515]],[[0,0,498,697,519]],[[0,0,499,697,522]],[[0,0,498,697,526]],[[0,0,499,697,529]],[[0,0,498,697,533]],[[0,0,499,697,536]],[[0,0,498,697,540]],[[0,0,499,697,543]],[[0,0,498,697,547],[324,107,433,231,548],[65,107,206,229,549],[210,107,318,229,550],[210,254,289,359,551],[294,255,433,359,552],[65,254,204,359,553]],[[0,0,499,697,556],[490,0,499,697,558]],[[0,0,498,697,562],[8,0,499,697,564]],[[0,0,499,697,567]],[[0,0,498,697,571]],[[0,0,499,697,574]],[[0,0,498,697,578]],[[0,0,499,697,582]],[[0,0,498,697,587]],[[0,0,499,697,590]],[[0,0,498,697,594]],[[0,0,499,697,597]],[[0,0,498,697,601]],[[0,0,499,697,604]],[[0,0,498,697,608]],[[0,0,499,697,611]],[[0,0,498,697,615]],[[0,0,499,697,618],[489,0,499,697,620]],[[0,0,498,697,624],[7,0,499,697,626]],[[0,0,499,697,629]],[[0,0,498,697,633]],[[0,0,499,697,636]],[[0,0,498,697,640]],[[0,0,499,697,643]],[[0,0,498,697,647]],[[0,0,499,697,650]],[[0,0,498,697,654]],[[0,0,499,697,657]],[[0,0,498,697,661]],[[0,0,499,697,664]],[[0,0,498,697,668]],[[0,0,499,697,671]],[[0,0,498,697,675]],[[0,0,499,697,678],[490,0,499,697,680]],[[0,0,498,697,684],[8,0,498,697,686]],[[0,0,499,697,689]],[[0,0,498,697,693]],[[0,0,499,697,696]],[[0,0,498,697,700]],[[0,0,499,697,703]],[[0,0,498,697,707]],[[0,0,499,697,710]],[[0,0,498,697,714]],[[0,0,499,697,717]],[[0,0,498,697,721]],[[0,0,499,697,724]],[[0,0,498,697,728]],[[0,0,499,697,731]],[[0,0,498,697,735]],[[0,0,499,697,738],[490,0,499,697,740]],[[0,0,498,697,744],[8,0,499,697,746]],[[0,0,499,697,749]],[[0,0,498,697,753]],[[0,0,499,697,756]],[[0,0,498,697,760]],[[0,0,499,697,763]],[[0,0,498,697,767]],[[0,0,499,697,770]],[[0,0,498,697,774]],[[0,0,499,697,777]],[[0,0,498,697,781]],[[0,0,499,697,784]],[[0,0,498,697,788]],[[0,0,499,697,791]],[[0,0,498,697,795]],[[0,0,499,697,798],[490,0,499,697,800]],[[0,0,498,697,804],[8,0,498,697,806]],[[0,0,499,697,809]],[[0,0,498,697,813]],[[0,0,499,697,816]],[[0,0,498,697,820]],[[0,0,499,697,823]],[[0,0,498,697,827]],[[0,0,499,697,830]],[[0,0,498,697,834]],[[0,0,499,697,837]],[[0,0,498,697,841]],[[0,0,499,697,844]],[[0,0,498,697,848]],[[0,0,499,697,851]],[[0,0,498,697,855]],[[0,0,499,697,858]],[[0,0,498,697,862]],[[0,0,499,697,865],[490,0,499,697,867]],[[0,0,498,697,871],[8,0,498,697,873]],[[0,0,499,697,876]],[[0,0,498,697,880]],[[0,0,499,697,883]],[[0,0,498,697,887]],[[0,0,499,697,890]],[[0,0,498,697,894]],[[0,0,499,697,897]],[[0,0,498,697,901]],[[0,0,499,697,904]],[[0,0,498,697,908]],[[0,0,499,697,911]],[[0,0,498,697,915]],[[0,0,499,697,918],[490,0,499,696,920]],[[0,0,498,697,924],[8,0,499,696,926]],[[0,0,499,697,929]],[[0,0,498,697,933]],[[0,0,499,697,936]],[[0,0,498,697,940]],[[0,0,499,697,943]],[[0,0,498,697,947]],[[0,0,499,697,950]],[[0,0,498,697,954]],[[0,0,499,697,957]],[[0,0,498,697,961]],[[0,0,499,697,964]],[[0,0,498,697,968]],[[0,0,499,697,971]],[[0,0,498,697,975]],[[0,0,499,697,978],[489,0,499,696,980]],[[7,0,499,696,984]],[[0,0,499,697,987]],[[0,0,498,697,991]],[[0,0,499,697,994]],[[0,0,498,697,998]],[[0,0,499,697,1001],[65,329,245,465,1002]],[[0,0,498,697,1006],[102,355,126,369,1008]],[[0,0,499,697,1013]],[[0,0,498,697,1017]],[[0,0,499,697,1020]],[[0,0,498,697,1024]],[[0,0,499,697,1027]],[[0,0,498,697,1031]],[[0,0,499,697,1034],[65,471,112,537,1035]],[[0,0,498,697,1039]],[[0,0,499,697,1042],[490,0,499,697,1044]],[[0,0,498,697,1048],[8,0,499,697,1050]],[[0,0,499,697,1053]],[[0,0,498,697,1057]],[[0,0,499,697,1060]],[[0,0,498,697,1064]],[[0,0,499,697,1067]],[[0,0,498,697,1071]],[[0,0,499,697,1074]],[[0,0,498,697,1078]],[[0,0,499,697,1081]],[[0,0,498,697,1085]],[[0,0,499,697,1088],[65,181,197,305,1089],[68,348,182,496,1090],[194,349,307,498,1091],[315,349,431,497,1092]],[[0,0,498,697,1096],[66,95,184,245,1097],[194,94,307,246,1098],[315,96,433,246,1099],[68,333,183,485,1100],[192,333,306,485,1101],[315,333,431,484,1102]],[[0,0,499,697,1105],[64,230,182,381,1106],[192,230,307,382,1107],[314,230,431,382,1108],[490,0,499,696,1110]],[[0,0,498,697,1114],[8,0,498,696,1116]],[[0,0,499,697,1119]],[[0,0,498,697,1123]],[[0,0,499,697,1126]],[[0,0,498,697,1130]],[[0,0,499,697,1133]],[[0,0,498,697,1137]],[[0,0,499,697,1140]],[[0,0,498,697,1144]],[[0,0,499,697,1147]],[[0,0,498,697,1151]],[[0,0,499,697,1154]],[[0,0,498,697,1158]],[[0,0,499,697,1161]],[[0,0,498,697,1165]],[[0,0,499,697,1168]],[[0,0,498,697,1172]],[[0,0,499,697,1175],[490,0,499,697,1177]],[[0,0,498,697,1181],[8,0,499,697,1183]],[[0,0,499,697,1186]],[[0,0,498,697,1190]],[[0,0,499,697,1193]],[[0,0,498,697,1197],[189,512,294,611,1198]],[[0,0,499,697,1201]],[[0,0,498,697,1205]],[[0,0,499,697,1208]],[[0,0,498,697,1212]],[[0,0,499,697,1215]],[[0,0,498,697,1219]],[[0,0,499,697,1222]],[[0,0,498,697,1226]],[[0,0,499,697,1229]],[[0,0,498,697,1233]],[[0,0,499,697,1236],[490,0,499,697,1238]],[[0,0,498,697,1242],[8,0,499,697,1244]],[[0,0,499,697,1247]],[[0,0,498,697,1251]],[[0,0,499,697,1254]],[[0,0,498,697,1258]],[[0,0,499,697,1261]],[[0,0,498,697,1265]],[[0,0,499,697,1268]],[[0,0,498,697,1272]],[[0,0,499,697,1275]],[[0,0,498,697,1279]],[[0,0,499,697,1282]],[[0,0,498,697,1286]],[[0,0,499,697,1289]],[[0,0,498,697,1293]],[[0,0,499,697,1296]],[[0,0,498,697,1300]],[[0,0,499,697,1303]]],"text_len_per_page":[53,54,530,111,672,851,750,457,497,476,515,181,671,1011,1034,1048,920,970,945,664,895,845,961,990,972,654,730,507,1244,1018,871,896,197,321,692,981,923,828,851,956,861,981,593,684,851,970,675,958,776,739,736,355,134,189,632,1038,765,1006,1009,1028,675,980,1004,995,768,932,936,741,984,867,1037,376,134,247,639,916,860,977,1078,1027,1065,993,987,583,610,658,661,597,667,938,805,247,619,830,674,889,622,1008,975,857,839,920,838,820,789,734,1005,960,830,596,897,836,686,969,363,171,699,874,895,905,972,970,994,1090,1032,726,935,912,653,1017,765,258,694,891,857,1006,926,1029,1004,723,948,888,881,866,829,646,899,829,774,245,673,954,966,849,841,902,937,942,634,914,781,577,830,939,216,267,662,979,934,936,992,961,708,555,918,971,759,885,860,846,817,230,675,881,878,1023,985,891,968,969,756,886,805,810,718,978,1125,248,679,826,997,973,991,881,927,704,897,876,781,1082,969,1209,879,260,621,824,873,759,876,845,839,805,701,931,944,917,664,885,989,521,134,237,674,986,998,954,987,1008,1034,708,957,1018,667,979,970,234,685,913,979,997,1015,987,972,613,910,963,1030,663,954,906,134,191,666,733,809,828,723,875,671,793,810,762,1025,1032,988,833,840,274,618,760,891,699,949,927,674,837,668,429,563,674,816,235,618,784,748,881,858,882,908,890,614,906,813,861,929,632,837,837,302,284,619,942,1003,816,1060,464,917,915,601,983,948,639,950,961,648,241,627,943,1030,906,925,849,992,803,612,838,843,674,815,939,473,621,646],"metadata":{"format":"PDF 1.6","title":"一.FIT)","author":"Administrator","subject":"","keywords":"","creator":"pdfFactory Pro www.fineprint.cn","producer":"pdfFactory Pro 4.10 (Windows XP Professional x86 Chinese)","creationDate":"D:20140729085755+08'00'","modDate":"D:20170616144747+08'00'","trapped":"","encryption":null}}
    # o = json.loads(json.dumps(o))
    # total_page = o["total_page"]
    # page_width = o["page_width_pts"]
    # page_height = o["page_height_pts"]
    # img_sz_list = o["image_info_per_page"]
    # text_len_list = o['text_len_per_page']
    # pdf_path = o['pdf_path']
    # is_encrypted = o['is_encrypted']
    # is_needs_password = o['is_needs_password']
    # if is_encrypted or total_page == 0 or is_needs_password:  # 加密的，需要密码的，没有页面的，都不处理
    #     print("加密的")
    #     exit(0)
    # tag = classify(pdf_path, total_page, page_width, page_height, img_sz_list, text_len_list)
    # o['is_text_pdf'] = tag
    # print(json.dumps(o, ensure_ascii=False))
    